from datetime import datetime

def get_files_to_copy(bucket_name, prefix, s3_client, in_entities):
    print("bucket name: " + bucket_name)
    print("prefix: " + prefix)
    response = s3_client.list_objects_v2(Bucket=bucket_name, Prefix=prefix, MaxKeys=20000).get('Contents', None)
    files = None
    if response:
        if in_entities:
            print("entities: " + str(in_entities))
            files= list(lambda content: content.get("Key"), response)
        else:
            files = response
    return files

def perform_copy(s3_client, s3_contents, source_bucket, target_bucket, target_prefix):
    try:
        today_date = datetime.today().strftime('%Y-%m-%d')
        target_file = target_bucket/target_prefix/today_date/
        if s3_contents:
            for key in s3_contents:
                source_file = key['Key']
                copy_source = {'Bucket': source_bucket, 'Key': source_file}
                target_file = target_bucket/target_prefix/today_date/source_file
                target_destination = {'Bucket': target_bucket, 'Key': target_file}
                logger.info("copying source: " + str(copy_source) + " to destination " + str(target_destination))
                s3_client.copy_object(CopySource=copy_source, Bucket=target_bucket, Key=target_file, )
                #s3_client.delete_object(Bucket=source_bucket, Key=source_file)

        else:
            print("Empty response received, no files found to copy")
            logger.info("No files found to copy")
    except Exception as e:
        print(e.response['Error']['Message'])
        raise e


def lambda_handler(event, context):
    try:
        print("context_details: " + str(event))
        logger.info("Perform back up")
        s3_client = boto3.client('s3')
        source_s3_bucket = os.environ['SOURCE_BUCKET']
        target_s3_bucket = os.environ['TARGET_BUCKET']
        source_s3_prefix = os.environ['SOURCE_PREFIX']
        target_s3_prefix = os.environ['TARGET_PREFIX']
        
        response = get_files_to_copy(source_s3_bucket, source_prefix, s3_client, batch_ids)
        perform_copy(s3_client, response, source_s3_bucket, target_s3_bucket, source_prefix, target_s3_prefix)

        return event
    except Exception as err:
        logger.error("Error occurred while handling the event, ExceptionTrace=%s" % err)
        traceback.print_exc()
